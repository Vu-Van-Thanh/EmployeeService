// <auto-generated />
using System;
using EmployeeService.Infrastructure.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250514150018_AddDateExpired")]
    partial class AddDateExpired
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.Education", b =>
                {
                    b.Property<Guid>("EducationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EducationID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EducationID = new Guid("672bbf18-7e34-43b4-812b-9299b2b23ddc"),
                            Degree = 3,
                            Description = "Chuyên ngành phần mềm",
                            EmployeeID = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            EndDate = new DateTime(2019, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Major = "Công nghệ thông tin",
                            School = "Đại học Bách Khoa Hà Nội",
                            StartDate = new DateTime(2015, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EducationID = new Guid("87c19085-f180-439a-8c79-92976f9c52d6"),
                            Degree = 3,
                            Description = "Nghiên cứu máy học nâng cao",
                            EmployeeID = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            EndDate = new DateTime(2022, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Major = "Trí tuệ nhân tạo",
                            School = "Đại học Công nghệ - ĐHQGHN",
                            StartDate = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EducationID = new Guid("087694ac-137d-443f-8ce4-5e6ad5bda70b"),
                            Degree = 2,
                            Description = "Chuyên ngành kế toán doanh nghiệp",
                            EmployeeID = new Guid("d05780d4-5742-40ca-8403-0febd44b1555"),
                            EndDate = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Major = "Kế toán",
                            School = "Đại học Kinh tế Quốc dân",
                            StartDate = new DateTime(2014, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EducationID = new Guid("2f954c2f-6629-4faf-8f20-bb9a60be7c1a"),
                            Degree = 3,
                            Description = "Tốt nghiệp loại giỏi",
                            EmployeeID = new Guid("d05780d4-5742-40ca-8403-0febd44b1555"),
                            EndDate = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Major = "Tài chính",
                            School = "Học viện Tài chính",
                            StartDate = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Commune")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Ethnic")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("IndentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlaceIssued")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tax")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeID = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            AccountID = new Guid("30e50c07-64b5-4adc-bd04-dfb693a3928c"),
                            Address = "123 Le Loi, District 1, Ho Chi Minh City",
                            Commune = "Ben Nghe",
                            Country = "Vietnam",
                            DateIssued = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "District 1",
                            Ethnic = "Kinh",
                            FirstName = "Nguyen",
                            Gender = 0,
                            IndentityCard = "079203456789",
                            InsuranceNumber = "VN1234567890",
                            IsActived = true,
                            LastName = "Van A",
                            Nationality = "Việt Nam",
                            PlaceIssued = "HCMC",
                            PlaceOfBirth = "Ho Chi Minh City",
                            Position = "CK000",
                            Province = "Ho Chi Minh",
                            Religion = "Không",
                            Tax = "1234567890123"
                        },
                        new
                        {
                            EmployeeID = new Guid("d05780d4-5742-40ca-8403-0febd44b1555"),
                            Address = "45 Nguyen Hue, District 1, Ho Chi Minh City",
                            Commune = "Hang Bac",
                            Country = "Vietnam",
                            DateIssued = new DateTime(2016, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1995, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "Hoan Kiem",
                            Ethnic = "Kinh",
                            FirstName = "Tran",
                            Gender = 1,
                            IndentityCard = "091234567890",
                            InsuranceNumber = "VN0987654321",
                            IsActived = true,
                            LastName = "Thi B",
                            Nationality = "Việt Nam",
                            PlaceIssued = "Ha Noi",
                            PlaceOfBirth = "Ha Noi",
                            Position = "NH000",
                            Province = "Ha Noi",
                            Religion = "Phật giáo",
                            Tax = "9876543210987"
                        });
                });

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.EmployeeContract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SalaryBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalaryIndex")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeContracts");

                    b.HasData(
                        new
                        {
                            ContractId = new Guid("9ce6d105-3f65-432e-85f0-714299eb6644"),
                            ContractNumber = "CT0001",
                            ContractType = "Full-time",
                            EmployeeId = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Software Engineer",
                            SalaryBase = 50000m,
                            SalaryIndex = 1.5m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            ContractId = new Guid("c3f4dd5a-d9fb-4df8-ac02-b7128fd52271"),
                            ContractNumber = "CT0002",
                            ContractType = "Part-time",
                            EmployeeId = new Guid("d05780d4-5742-40ca-8403-0febd44b1555"),
                            Position = "Architecture Engineer",
                            SalaryBase = 50000m,
                            SalaryIndex = 1.2m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.EmployeeMedia", b =>
                {
                    b.Property<Guid>("EmployeeMediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeMediaID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeMedias");

                    b.HasData(
                        new
                        {
                            EmployeeMediaID = new Guid("e51d7149-ca85-4739-bcf1-cedaa6928d68"),
                            EmployeeID = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            MediaType = "AVATAR",
                            MediaUrl = "/wwwroot/Asserts/avatar.png"
                        },
                        new
                        {
                            EmployeeMediaID = new Guid("674d4176-7d33-44fb-a198-583028016a62"),
                            EmployeeID = new Guid("d05780d4-5742-40ca-8403-0febd44b1555"),
                            MediaType = "AVATAR",
                            MediaUrl = "/wwwroot/Asserts/avatar.png"
                        });
                });

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.Relative", b =>
                {
                    b.Property<Guid>("RelativeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Commune")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("EmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ethnic")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IndentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RelativeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RelativeID");

                    b.ToTable("Relatives");

                    b.HasData(
                        new
                        {
                            RelativeID = new Guid("77f52741-e1d4-4fe5-ad46-efa6ebf2cee6"),
                            Address = "123 Đường Lê Lợi, Hà Nội",
                            Commune = "Tràng Tiền",
                            Country = "Việt Nam",
                            DateOfBirth = new DateTime(1970, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "Hoàn Kiếm",
                            EmployeeID = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            Ethnic = "Kinh",
                            FirstName = "Nguyễn",
                            IndentityCard = "123456789",
                            LastName = "Văn A",
                            Nationality = "Việt Nam",
                            PlaceOfBirth = "Hà Nội",
                            Province = "Hà Nội",
                            RelativeType = "Bố",
                            Religion = "Không"
                        },
                        new
                        {
                            RelativeID = new Guid("c46795c8-45e3-498f-bbf0-aa8b7e76da0e"),
                            Address = "456 Đường Nguyễn Trãi, TP.HCM",
                            Commune = "Bến Nghé",
                            Country = "Việt Nam",
                            DateOfBirth = new DateTime(1972, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "Quận 1",
                            EmployeeID = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            Ethnic = "Kinh",
                            FirstName = "Trần",
                            IndentityCard = "987654321",
                            LastName = "Thị B",
                            Nationality = "Việt Nam",
                            PlaceOfBirth = "TP.HCM",
                            Province = "TP.HCM",
                            RelativeType = "Mẹ",
                            Religion = "Không"
                        },
                        new
                        {
                            RelativeID = new Guid("c48e9c2e-6a7e-4e83-9a1e-60ee0a6f30a2"),
                            Address = "789 Đường Láng, Hà Nội",
                            Commune = "Láng Thượng",
                            Country = "Việt Nam",
                            DateOfBirth = new DateTime(1995, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "Đống Đa",
                            EmployeeID = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            Ethnic = "Kinh",
                            FirstName = "Phạm",
                            IndentityCard = "456789123",
                            LastName = "Văn C",
                            Nationality = "Việt Nam",
                            PlaceOfBirth = "Hà Nội",
                            Province = "Hà Nội",
                            RelativeType = "Anh trai",
                            Religion = "Không"
                        });
                });

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.Education", b =>
                {
                    b.HasOne("EmployeeService.Core.Domain.Entities.Employee", "Employee")
                        .WithMany("Education")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.EmployeeContract", b =>
                {
                    b.HasOne("EmployeeService.Core.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeContract")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.EmployeeMedia", b =>
                {
                    b.HasOne("EmployeeService.Core.Domain.Entities.Employee", "employee")
                        .WithMany("EmployeeMedia")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("EmployeeService.Core.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Education");

                    b.Navigation("EmployeeContract");

                    b.Navigation("EmployeeMedia");
                });
#pragma warning restore 612, 618
        }
    }
}
